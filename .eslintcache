[{"/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/index.js":"1","/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/App.js":"2","/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/FirebaseConfig.js":"3","/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/useDarkMode.js":"4","/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/Themes.js":"5","/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/Globalstyle.js":"6","/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/Header.js":"7","/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/Logout.js":"8","/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/Toggler.js":"9","/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/Navbar.js":"10","/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/ErrorMessage.js":"11","/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/UserProfile.js":"12","/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/Login.js":"13","/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/Loading.js":"14","/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/TravelAdvice.js":"15","/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/Main.js":"16","/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/GoogleLogin.js":"17","/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/backendApi.js":"18","/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/UserContacts.js":"19","/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/FacebookLogin.js":"20","/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/SignInEmail.js":"21","/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/SignupForm.js":"22","/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/WhoYouWith.js":"23","/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/JourneyDetails.js":"24","/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/Map.js":"25","/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/geocodeApi.js":"26","/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/SelectContact.js":"27","/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/Switch.js":"28","/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/CrimeApi.js":"29","/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/styles/MapNightMode.js":"30"},{"size":417,"mtime":1610035410670,"results":"31","hashOfConfig":"32"},{"size":6143,"mtime":1610383891437,"results":"33","hashOfConfig":"32"},{"size":1092,"mtime":1610114490774,"results":"34","hashOfConfig":"32"},{"size":657,"mtime":1610035405762,"results":"35","hashOfConfig":"32"},{"size":543,"mtime":1610299883793,"results":"36","hashOfConfig":"32"},{"size":582,"mtime":1610400285520,"results":"37","hashOfConfig":"32"},{"size":339,"mtime":1610287846571,"results":"38","hashOfConfig":"32"},{"size":557,"mtime":1610299883791,"results":"39","hashOfConfig":"32"},{"size":3101,"mtime":1610287846574,"results":"40","hashOfConfig":"32"},{"size":1192,"mtime":1610299883792,"results":"41","hashOfConfig":"32"},{"size":167,"mtime":1610035394054,"results":"42","hashOfConfig":"32"},{"size":19983,"mtime":1610398215290,"results":"43","hashOfConfig":"32"},{"size":6385,"mtime":1610399859921,"results":"44","hashOfConfig":"32"},{"size":131,"mtime":1610035397060,"results":"45","hashOfConfig":"32"},{"size":214,"mtime":1610369953895,"results":"46","hashOfConfig":"32"},{"size":12320,"mtime":1610383891438,"results":"47","hashOfConfig":"32"},{"size":467,"mtime":1610399549289,"results":"48","hashOfConfig":"32"},{"size":1891,"mtime":1610383891441,"results":"49","hashOfConfig":"32"},{"size":23800,"mtime":1610383891440,"results":"50","hashOfConfig":"32"},{"size":458,"mtime":1610399759261,"results":"51","hashOfConfig":"32"},{"size":1939,"mtime":1610398486895,"results":"52","hashOfConfig":"32"},{"size":2387,"mtime":1610400042579,"results":"53","hashOfConfig":"32"},{"size":2200,"mtime":1610299883793,"results":"54","hashOfConfig":"32"},{"size":7371,"mtime":1610383891438,"results":"55","hashOfConfig":"32"},{"size":15492,"mtime":1610396937063,"results":"56","hashOfConfig":"32"},{"size":865,"mtime":1610383891444,"results":"57","hashOfConfig":"32"},{"size":1946,"mtime":1610383891439,"results":"58","hashOfConfig":"32"},{"size":1519,"mtime":1610299883792,"results":"59","hashOfConfig":"32"},{"size":711,"mtime":1610116161472,"results":"60","hashOfConfig":"32"},{"size":5111,"mtime":1610035390000,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"zlqoy5",{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"64"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"64"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"64"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"64"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"64"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"64"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"64"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"64"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"64"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"64"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/index.js",[],["133","134"],"/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/App.js",["135","136","137"],"import { React, useState, useContext, createContext, useEffect } from 'react'\nimport { ThemeProvider } from 'styled-components'\nimport { useDarkMode } from './components/useDarkMode'\nimport { GlobalStyles } from './components/Globalstyle'\nimport { lightTheme, darkTheme } from './components/Themes'\nimport Toggle from './components/Toggler'\nimport Header from './components/Header'\nimport Login from './components/Login'\nimport Loading from './components/Loading'\nimport Logout from './components/Logout'\nimport Main from './components/Main'\nimport UserProfile from './components/UserProfile'\nimport TravelAdvice from './components/TravelAdvice'\nimport { Router, navigate } from '@reach/router'\nimport './components/styles/App.css'\nimport './components/styles/mainContent.css'\nimport './components/styles/header.css'\nimport './components/styles/loading.css'\nimport './components/styles/loginPage.css'\nimport './components/styles/travelAdvice.css'\nimport './components/styles/userProfile.css'\nimport './components/styles/navbar.css'\nimport './components/styles/error.css'\nimport './components/styles/signInEmail.css'\nimport './components/styles/messageContent.css'\nimport './components/styles/Map.css'\nimport './components/styles/userContacts.css'\nimport { auth, provider } from './FirebaseConfig'\nimport firebase from './FirebaseConfig.js'\nimport Navbar from './components/Navbar'\nimport ErrorMessage from './components/ErrorMessage'\n\nfunction App() {\n    // state stuff\n    const [isLoggedIn, setIsLoggedIn] = useState(false)\n    const [userId, setUserId] = useState('')\n    const [userName, setUserName] = useState('')\n    const [isLoading, setIsLoading] = useState(true)\n    // isNewUser set to null because we either want true or false to come from Firebase or after we tell it after they submit their details in UserProfile\n    const [isNewUser, setIsNewUser] = useState(null)\n\n    // componentDidMount to check local storage for logged in state\n    useEffect(() => {\n        const localLoggedIn = localStorage.getItem('loggedIn')\n        if (localLoggedIn === 'true') {\n            setIsLoggedIn(true)\n        }\n        firebase.auth().onAuthStateChanged((user) => {\n            if (user) {\n                setUserId(user.uid)\n            }\n        })\n\n        setIsLoading(false)\n    }, [])\n    // console.log(userId, 'user ID in app')\n    // dark mode stuff\n    const [theme, themeToggler, mountedComponent] = useDarkMode()\n    const themeMode = theme === 'light' ? lightTheme : darkTheme\n\n    // method to toggle isLoggedIn in state\n    const setLoggedIn = () => {\n        if (!isLoggedIn) {\n            setIsLoggedIn(true)\n            // set local state\n            localStorage.setItem('loggedIn', 'true')\n        }\n    }\n    // method to set current user id in state\n    const setId = (id) => {\n        setUserId(id)\n    }\n    // method to set current userName in state\n    const setUsername = (username) => {\n        setUserName(username)\n    }\n    //method to logout\n\n    const logout = () => {\n        auth.signOut().then(() => {\n            localStorage.setItem('loggedIn', 'false')\n            setIsLoggedIn(false)\n            navigate('/')\n        })\n    }\n\n    // method to check if current user is new to app\n\n    // console.log(isLoggedIn, '<<isLoggedIn');\n    // console.log(theme, 'newTheme')\n    // console.log(isNewUser, 'isNewuser')\n    if (!mountedComponent) return <div />\n    return (\n        // dark mode styled components wrapper\n        <ThemeProvider theme={themeMode}>\n            <>\n                <GlobalStyles />\n                {/* check if isLoading */}\n                {isLoading ? (\n                    <Loading />\n                ) : (\n                    <div className='App'>\n                        <div className='headerContainer'>\n                            <Toggle theme={theme} toggleTheme={themeToggler} />\n                            <Header />\n                            {/* render logout button only when user logged in */}\n                            {isLoggedIn && (\n                                <Logout\n                                    theme={theme}\n                                    toggleTheme={themeToggler}\n                                    logout={logout}\n                                />\n                            )}\n                        </div>\n                        {/* check if isLoggedIn */}\n                        {!isLoggedIn ? (\n                            // pass login methods to Login component\n                            <Login\n                                setId={setId}\n                                setLoggedIn={setLoggedIn}\n                                setUsername={setUsername}\n                                setIsNewUser={setIsNewUser}\n                                path='/'\n                            />\n                        ) : (\n                            <>\n                                <Navbar />\n\n                                <Router>\n                                    <Main\n                                        path='/main'\n                                        theme={theme}\n                                        userId={userId}\n                                    />\n                                    <UserProfile\n                                        path='/user-profile'\n                                        userId={userId}\n                                        isNewUser={isNewUser}\n                                        setIsNewUser={setIsNewUser}\n                                        userName={userName}\n                                    />\n                                    <TravelAdvice path='/travel-advice' />\n                                    <ErrorMessage\n                                        msg='Page not found'\n                                        code='404'\n                                        default\n                                    />\n                                </Router>\n                            </>\n                        )}\n                    </div>\n                )}\n            </>\n        </ThemeProvider>\n    )\n}\n\nexport default App\n","/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/FirebaseConfig.js",[],"/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/useDarkMode.js",[],"/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/Themes.js",[],"/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/Globalstyle.js",[],"/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/Header.js",["138"],"import React from 'react'\nimport Toggle from './Toggler'\nimport HomeIconSphere from '../icons/HomeIconSphere.png'\n\nconst Header = (props) => {\n    return (\n        <h1 className='headerContent'>\n            <img src={HomeIconSphere} className='HomeIcon' alt='icon'></img>\n            Safe Home\n        </h1>\n    )\n}\n\nexport default Header\n","/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/Logout.js",["139","140","141"],"import React from 'react'\nimport { auth, provider, firebase } from '../FirebaseConfig.js'\nimport styled from 'styled-components'\n\nconst LogoutButton = styled.button`\n    border: 2px solid ${({ theme }) => theme.toggleBorder};\n    border-radius: 30px;\n    cursor: pointer;\n    font-size: 0.5rem;\n    justify-content: space-between;\n    justify-self: left;\n    overflow: hidden;\n    padding: 0.5rem;\n    width: 4rem;\n    height: 3rem;\n`\nconst Logout = (props) => {\n    return <LogoutButton onClick={props.logout}>LOGOUT</LogoutButton>\n}\nexport default Logout\n","/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/Toggler.js",[],"/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/Navbar.js",[],"/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/ErrorMessage.js",[],"/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/UserProfile.js",["142","143","144","145","146","147"],"import { React, useState, useEffect, useContext } from 'react'\nimport { getUserByUid, postNewUser, sendEditUser } from './backendApi'\nimport Loading from './Loading'\nimport SetContacts from './UserContacts'\nimport UserContacts from './UserContacts'\nimport { makeStyles } from '@material-ui/core/styles'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\n\nfunction UserProfile(props) {\n    // material UI stuff\n    const useStyles = makeStyles((theme) => ({\n        root: {\n            '& > *': {\n                margin: theme.spacing(1),\n                width: '25ch',\n            },\n        },\n        button: {\n            margin: theme.spacing(1),\n            background: '#00A99D',\n        },\n    }))\n    const classes = useStyles()\n    // const [firebaseUid, setFirebaseUid] = useState('')\n    // const [users, setUsers] = useState({})\n    const [isLoading, setIsLoading] = useState(true)\n    // const [isNewUser, setIsNewUser] = useState(false)\n    const [firstName, setFirstName] = useState('')\n    const [lastName, setLastName] = useState('')\n    const [userName, setUserName] = useState('')\n    const [phoneNumber, setPhoneNumber] = useState('')\n    const [houseNumber, setHouseNumber] = useState('')\n    const [streetName, setStreetName] = useState('')\n    const [postCode, setPostCode] = useState('')\n    const [city, setCity] = useState('')\n    const [userData, setUserData] = useState('')\n    const [isNewUser, setIsNewUser] = useState(false)\n    const [userId, setUserId] = useState('')\n    const [showUserEdit, setShowUserEdit] = useState(false)\n    const [userEdited, setUserEdited] = useState(false)\n    const uid = JSON.parse(localStorage.getItem('userId'))\n\n    // set state\n    useEffect(() => {\n        // we don't need to change isLoading here\n        // console.log(props.userId, 'USER ID IN USER PROFILE')\n        // const reloadUserId = JSON.parse(localStorage.getItem('userProfileId'))\n\n        const userId = JSON.parse(localStorage.getItem('userId'))\n        const isNewUser = JSON.parse(localStorage.getItem('isNewUser'))\n        console.log(userData)\n        console.log(showUserEdit, 'show user edit')\n        console.log(firstName, 'firstName')\n\n        //new user with no details in back end\n        if (isNewUser) {\n            setIsNewUser(true)\n            setIsLoading(false)\n            // existing user\n        } else if (\n            !isNewUser &&\n            localStorage.getItem.localUser !== 'undefined'\n        ) {\n            getUserByUid(userId).then((user) => {\n                setUserData(user)\n\n                localStorage.setItem('localUser', JSON.stringify(user))\n                setIsLoading(false)\n            })\n            // new user after details submit\n        } else if (\n            !isNewUser &&\n            localStorage.getItem('localUser') === 'undefined'\n        ) {\n            const userId = JSON.parse(localStorage.getItem('userId'))\n            getUserByUid(userId).then((user) => {\n                setUserData(user)\n\n                localStorage.setItem('localUser', JSON.stringify(userData))\n                setIsLoading(false)\n            })\n        }\n    }, [userEdited, showUserEdit])\n\n    const handleNewUserSubmit = (event) => {\n        const userId = JSON.parse(localStorage.getItem('userId'))\n        event.preventDefault()\n        const newUser = {\n            first_name: firstName,\n            last_name: lastName,\n            username: userName,\n            phone_number: phoneNumber,\n            house_number: +houseNumber,\n            street_name: streetName,\n            postcode: postCode,\n            city: city,\n            uid: userId,\n        }\n        postNewUser(newUser).then((user) => {\n            setUserData(user)\n            localStorage.setItem('localUser', JSON.stringify(user))\n            localStorage.setItem('isNewUser', JSON.stringify(false))\n            // also save newUser to localStorage\n            props.setIsNewUser(false)\n            setIsNewUser(false)\n        })\n    }\n    const handleShowUserEdit = () => {\n        setFirstName(userData.user.first_name)\n        setLastName(userData.user.last_name)\n        setPhoneNumber(userData.user.phone_number)\n        setHouseNumber(userData.user.house_number)\n        setPostCode(userData.user.postcode)\n\n        setStreetName(userData.user.street_name)\n        setCity(userData.user.city)\n        setShowUserEdit(true)\n    }\n\n    const handleCancelEdit = () => {\n        setFirstName('')\n        setLastName('')\n        setPhoneNumber('')\n        setHouseNumber('')\n        setPostCode('')\n\n        setStreetName('')\n        setCity('')\n        setShowUserEdit(false)\n        console.log('CANCELLED!!')\n    }\n    const handleEditUserSubmit = (event) => {\n        event.preventDefault()\n        const editUser = {\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: phoneNumber,\n\n            house_number: houseNumber,\n            street_name: streetName,\n            postcode: postCode,\n            city: city,\n        }\n        sendEditUser(editUser, uid).then((user) => {\n            if (user) {\n                setFirstName('')\n                setLastName('')\n                setPhoneNumber('')\n                setHouseNumber('')\n                setPostCode('')\n\n                setStreetName('')\n                setCity('')\n\n                setShowUserEdit(false)\n                if (userEdited === true) {\n                    setUserEdited(false)\n                } else {\n                    setUserEdited(true)\n                }\n            }\n        })\n    }\n\n    return (\n        <div className='userProfileContent'>\n            {/* why is this not stuck on load when you are a new user coming to the page for the first time? */}\n            {isLoading ? (\n                <Loading />\n            ) : isNewUser ? (\n                <>\n                    <h2>New User Profile</h2>\n                    <div className='profileDetails'>\n                        <form\n                            className={classes.root}\n                            noValidate\n                            autoComplete='off'\n                        >\n                            <TextField\n                                className='form-control'\n                                id='filled-basic'\n                                label='First Name'\n                                name='firstName'\n                                type='text'\n                                value={firstName}\n                                onChange={(event) =>\n                                    setFirstName(event.target.value)\n                                }\n                                variant='filled'\n                            />\n                            <TextField\n                                className='form-control'\n                                id='filled-basic'\n                                label='Last Name'\n                                name='lastName'\n                                type='text'\n                                value={lastName}\n                                onChange={(event) =>\n                                    setLastName(event.target.value)\n                                }\n                                variant='filled'\n                            />\n                            <TextField\n                                className='form-control'\n                                id='filled-basic'\n                                label='Phone Number'\n                                name='phoneNumber'\n                                type='number'\n                                value={phoneNumber}\n                                onChange={(event) =>\n                                    setPhoneNumber(event.target.value)\n                                }\n                                variant='filled'\n                            />\n\n                            <TextField\n                                className='form-control'\n                                id='filled-basic'\n                                label='House Number'\n                                name='houseNumber'\n                                type='number'\n                                value={houseNumber}\n                                onChange={(event) =>\n                                    setHouseNumber(event.target.value)\n                                }\n                                variant='filled'\n                            />\n                            <TextField\n                                className='form-control'\n                                id='filled-basic'\n                                label='Street Name'\n                                name='streetName'\n                                type='text'\n                                value={streetName}\n                                onChange={(event) =>\n                                    setStreetName(event.target.value)\n                                }\n                                variant='filled'\n                            />\n                            <TextField\n                                className='form-control'\n                                id='filled-basic'\n                                label='Postcode'\n                                name='postCode'\n                                type='text'\n                                value={postCode}\n                                onChange={(event) =>\n                                    setPostCode(event.target.value)\n                                }\n                                variant='filled'\n                            />\n                            <TextField\n                                className='form-control'\n                                id='filled-basic'\n                                label='city'\n                                name='city'\n                                type='text'\n                                value={city}\n                                onChange={(event) =>\n                                    setCity(event.target.value)\n                                }\n                                variant='filled'\n                            />\n                        </form>\n                        <Button\n                            variant='contained'\n                            color='primary'\n                            className={classes.button}\n                            onClick={handleNewUserSubmit}\n                        >\n                            Submit Profile\n                        </Button>\n                    </div>\n                </>\n            ) : (\n                <>\n                    <h2>User Profile</h2>\n                    {!userData ? (\n                        <Loading />\n                    ) : (\n                        <div className='profileDetails'>\n                            {showUserEdit ? (\n                                <>\n                                    <form\n                                        className={classes.root}\n                                        noValidate\n                                        autoComplete='off'\n                                    >\n                                        <TextField\n                                            className='form-control'\n                                            id='filled-basic'\n                                            label='First Name'\n                                            name='firstName'\n                                            type='text'\n                                            value={firstName}\n                                            onChange={(event) =>\n                                                setFirstName(event.target.value)\n                                            }\n                                            variant='filled'\n                                        />\n                                        <TextField\n                                            className='form-control'\n                                            id='filled-basic'\n                                            label='Last Name'\n                                            name='lastName'\n                                            type='text'\n                                            value={lastName}\n                                            onChange={(event) =>\n                                                setLastName(event.target.value)\n                                            }\n                                            variant='filled'\n                                        />\n                                        <TextField\n                                            className='form-control'\n                                            id='filled-basic'\n                                            label='Phone Number'\n                                            name='phoneNumber'\n                                            type='text'\n                                            value={phoneNumber}\n                                            onChange={(event) =>\n                                                setPhoneNumber(\n                                                    event.target.value\n                                                )\n                                            }\n                                            variant='filled'\n                                        />\n\n                                        <TextField\n                                            className='form-control'\n                                            id='filled-basic'\n                                            label='House Number'\n                                            name='houseNumber'\n                                            type='text'\n                                            value={houseNumber}\n                                            onChange={(event) =>\n                                                setHouseNumber(\n                                                    event.target.value\n                                                )\n                                            }\n                                            variant='filled'\n                                        />\n                                        <TextField\n                                            className='form-control'\n                                            id='filled-basic'\n                                            label='Street Name'\n                                            name='streetName'\n                                            type='text'\n                                            value={streetName}\n                                            onChange={(event) =>\n                                                setStreetName(\n                                                    event.target.value\n                                                )\n                                            }\n                                            variant='filled'\n                                        />\n                                        <TextField\n                                            className='form-control'\n                                            id='filled-basic'\n                                            label='Postcode'\n                                            name='postCode'\n                                            type='text'\n                                            value={postCode}\n                                            onChange={(event) =>\n                                                setPostCode(event.target.value)\n                                            }\n                                            variant='filled'\n                                        />\n                                        <TextField\n                                            className='form-control'\n                                            id='filled-basic'\n                                            label='city'\n                                            name='city'\n                                            type='text'\n                                            value={city}\n                                            onChange={(event) =>\n                                                setCity(event.target.value)\n                                            }\n                                            variant='filled'\n                                        />\n                                    </form>\n                                    <div className='contactButtonsContainer'>\n                                        <Button\n                                            variant='contained'\n                                            color='primary'\n                                            className={classes.button}\n                                            onClick={handleCancelEdit}\n                                        >\n                                            Cancel\n                                        </Button>\n                                        <Button\n                                            variant='contained'\n                                            color='primary'\n                                            className={classes.button}\n                                            onClick={handleEditUserSubmit}\n                                        >\n                                            Save Contact\n                                        </Button>\n                                    </div>\n                                </>\n                            ) : (\n                                <>\n                                    <div className='currentUser'>\n                                        <p>\n                                            First Name:{' '}\n                                            {userData.user.first_name}\n                                        </p>\n                                        <p>\n                                            Last Name: {userData.user.last_name}\n                                        </p>\n                                        <p>\n                                            User Name: {userData.user.username}\n                                        </p>\n                                        <p>\n                                            Phone Number:{' '}\n                                            {userData.user.phone_number}\n                                        </p>\n                                        <p>\n                                            House Number:{' '}\n                                            {userData.user.house_number}\n                                        </p>\n                                        <p>\n                                            Street Name:{' '}\n                                            {userData.user.street_name}\n                                        </p>\n                                        <p>\n                                            Post Code: {userData.user.postcode}\n                                        </p>\n                                        <p>City: {userData.user.city}</p>\n                                    </div>\n                                    <Button\n                                        variant='contained'\n                                        color='primary'\n                                        className={classes.button}\n                                        onClick={handleShowUserEdit}\n                                    >\n                                        Edit Profile\n                                    </Button>\n                                </>\n                            )}\n                        </div>\n                    )}\n                </>\n            )}\n            <UserContacts />\n        </div>\n    )\n}\n\nexport default UserProfile\n","/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/Login.js",["148","149","150","151","152"],"/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/Loading.js",[],"/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/TravelAdvice.js",[],"/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/Main.js",["153","154","155"],"import React from 'react'\nimport { LoadScript } from '@react-google-maps/api'\nimport Map from './Map'\nimport JourneyDetails from './JourneyDetails'\nimport { getContactsByUid } from './backendApi'\nimport { useState, useEffect } from 'react'\nimport { getAddressFromCoord } from '../geocodeApi'\nimport WhoYouWith from './WhoYouWith'\nimport SelectContact from './SelectContact'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport { init } from 'emailjs-com'\nimport emailjs from 'emailjs-com'\n\nfunction Main(props) {\n    const useStyles = makeStyles((theme) => ({\n        root: {\n            '& > *': {\n                margin: theme.spacing(1),\n                width: '25ch',\n            },\n        },\n        button: {\n            margin: theme.spacing(1),\n            background: '#00A99D',\n        },\n    }))\n    const API_KEY = process.env.REACT_APP_API_KEY\n\n    const [journeyDetails, setDetails] = useState({})\n    const [userId, setUserId] = useState('')\n    const [savedDetails, setSavedDetails] = useState(false)\n    const [startedJourney, setStartedJourney] = useState(false)\n    const [origin, setOrigin] = useState('')\n    const [destination, setDestination] = useState('')\n    const [endRoute, setEndRoute] = useState(false)\n\n    // details from journey details component\n    const [travelMode, setTravelMode] = useState('walking')\n    const [taxiReg, setTaxiReg] = useState('')\n    const [busService, setBusService] = useState('')\n    const [trainService, setTrainService] = useState('')\n    const [travelCompanion, setTravelCompanion] = useState('')\n    const [other, setOther] = useState('')\n\n    // contact selected from selectContact component\n    const [selectedContact, setSelectedContact] = useState('')\n    const [contacts, setContacts] = useState([])\n    const [contactErrorMessage, setContactErrorMessage] = useState('')\n    const [hasError, setHasError] = useState(false)\n\n    // details from whoYouWith component\n    const [personOne, setPersonOne] = useState('')\n    const [personTwo, setPersonTwo] = useState('')\n    const [personThree, setPersonThree] = useState('')\n    const classes = useStyles()\n    const [watchId, setWatchId] = useState('')\n\n    const [apiCalled, setApiCalled] = useState(false)\n\n    // component did mount to monitor changing journey details. triggers on new route\n    useEffect(() => {\n        setUserId(props.userId)\n        if (!apiCalled) {\n            fetchAllContacts()\n        }\n    }, [])\n\n    // sets the state to the required details\n    const saveDetails = (origin, destination, duration, distance, centre) => {\n        if (typeof origin !== 'string') {\n            getAddressFromCoord(origin).then((response) => {\n                setDetails({\n                    origin: response,\n                    destination,\n                    duration,\n                    distance,\n                    userLocation: centre,\n                })\n            })\n        } else {\n            setDetails({\n                origin,\n                destination,\n                duration,\n                distance,\n                userLocation: centre,\n            })\n        }\n    }\n\n    // email sending function.\n    const sendStartEmail = () => {\n        init('user_woEvxk93zUEkrcs7jCTzE')\n        const selected = contacts.filter((contact) => {\n            return contact.first_name === selectedContact\n        })\n\n        let message = ''\n\n        if (travelMode === 'walking') {\n            message = `, it should take me ${journeyDetails.duration}.`\n        } else if (travelMode === 'taxi') {\n            message = `. I'm going by taxi and the registration is ${taxiReg}.`\n        } else if (travelMode === 'train') {\n            message = `. I'm going by train and the information is ${trainService}.`\n        } else if (travelMode === 'bus') {\n            message = `. I'm going by bus and the number is ${busService}.`\n        } else {\n            message = `. I'm going by ${other}.`\n        }\n\n        const templateParams = {\n            from_name: 'safe home test',\n            to_name: `${selected[0].first_name} ${selected[0].last_name}`,\n            message: `I'm going from ${journeyDetails.origin} to ${journeyDetails.destination} ${message} My current position is ${journeyDetails.userLocation}. I'm going with ${travelCompanion}. I've been with ${personOne}, ${personTwo} and ${personThree}`,\n            to_email: 'albmatcar@gmail.com',\n        }\n\n        emailjs\n            .send('default_service', 'template_u667pzk', templateParams)\n            .then(\n                function (response) {\n                    console.log('SUCCESS!', response.status, response.text)\n                },\n                function (error) {\n                    console.log('FAILED...', error)\n                }\n            )\n    }\n\n    const sendFinishEmail = () => {\n        init('user_woEvxk93zUEkrcs7jCTzE')\n        // console.log(contacts, 'contacts')\n        const selected = contacts.filter((contact) => {\n            return contact.first_name === selectedContact\n        })\n\n        console.log(selected.email)\n\n        const templateParams = {\n            from_name: 'safe home test',\n            to_name: `${selected[0].first_name} ${selected[0].last_name}`,\n            message: \"I'm safe home!\",\n            to_email: 'albmatcar@gmail.com',\n        }\n\n        emailjs\n            .send('default_service', 'template_u667pzk', templateParams)\n            .then(\n                function (response) {\n                    console.log('FINISH EMAIL!', response.status, response.text)\n                },\n                function (error) {\n                    console.log('FAILED...', error)\n                }\n            )\n    }\n\n    const saveDetailsClick = () => {\n        if (savedDetails) {\n            setSavedDetails(false)\n        } else {\n            setSavedDetails(true)\n        }\n    }\n    const startJourneyClick = () => {\n        if (startedJourney && selectedContact !== '') {\n            setStartedJourney(false)\n            clearWatch(watchId)\n            sendFinishEmail()\n            setSavedDetails(false)\n            setPersonOne('')\n            setPersonTwo('')\n            setPersonThree('')\n            setTravelMode('walking')\n            setTravelCompanion('')\n            setSelectedContact('')\n            setOrigin('')\n            setDestination('')\n            setEndRoute(true)\n        } else if (selectedContact !== '' && !startedJourney) {\n            sendStartEmail()\n            setStartedJourney(true)\n            setHasError(false)\n        } else {\n            setHasError(true)\n            setContactErrorMessage('You need to select an emergency contact!')\n        }\n    }\n\n    const clearWatch = (watchId) => {\n        // for (let i = 0; i < watchId; i++) {\n        navigator.geolocation.clearWatch(watchId)\n        // }\n    }\n\n    // uid is hard coded\n    const fetchAllContacts = () => {\n        getContactsByUid('ouq2Vs5hq4afIZiEBV0wIUb8Fk03').then((response) => {\n            setContacts(response.contacts)\n            setApiCalled(true)\n        })\n    }\n\n    return (\n        <div className='mainContent'>\n            <LoadScript\n                googleMapsApiKey={API_KEY}\n                libraries={['visualization']}\n            >\n                <Map\n                    theme={props.theme}\n                    saveDetails={saveDetails}\n                    startedJourney={startedJourney}\n                    setWatchId={setWatchId}\n                    watchId={watchId}\n                    setOrigin={setOrigin}\n                    origin={origin}\n                    setDestination={setDestination}\n                    destination={destination}\n                    endRoute={endRoute}\n                />\n            </LoadScript>\n            {!startedJourney &&\n                (savedDetails ? (\n                    <div className='savedDetails'>\n                        <p>\n                            People who you are with: {personOne} {personTwo}{' '}\n                            {personThree}\n                        </p>\n                        <p>Travel companion: {travelCompanion}</p>\n                        {travelMode === 'walking' ? (\n                            <div>\n                                <p>\n                                    I'm going to walk home and these are my\n                                    journey details:\n                                </p>\n                                <ul>\n                                    {Object.keys(journeyDetails).map(\n                                        (detail) => {\n                                            if (detail !== 'userLocation') {\n                                                return (\n                                                    <li>\n                                                        {`${detail}: ${journeyDetails[detail]}`}\n                                                    </li>\n                                                )\n                                            }\n                                        }\n                                    )}\n                                </ul>\n                            </div>\n                        ) : (\n                            <p>\n                                I'm going to go home by {travelMode} and these\n                                are the details:\n                            </p>\n                        )}\n                        {travelMode === 'taxi' && <p>{taxiReg}</p>}\n                        {travelMode === 'bus' && <p>{busService}</p>}\n                        {travelMode === 'train' && <p>{trainService}</p>}\n                        {travelMode === 'other' && <p>{other}</p>}\n                        <Button\n                            variant='contained'\n                            color='primary'\n                            className={classes.button}\n                            onClick={saveDetailsClick}\n                        >\n                            Edit Details\n                        </Button>\n                    </div>\n                ) : (\n                    <div className='messageContent'>\n                        <WhoYouWith\n                            savePersonOne={setPersonOne}\n                            personOne={personOne}\n                            savePersonTwo={setPersonTwo}\n                            personTwo={personTwo}\n                            savePersonThree={setPersonThree}\n                            personThree={personThree}\n                        />\n                        <JourneyDetails\n                            setTravelMode={setTravelMode}\n                            travelMode={travelMode}\n                            setTaxiReg={setTaxiReg}\n                            taxiReg={taxiReg}\n                            setBusService={setBusService}\n                            busService={busService}\n                            setTrainService={setTrainService}\n                            trainService={trainService}\n                            setTravelCompanion={setTravelCompanion}\n                            travelCompanion={travelCompanion}\n                            setOther={setOther}\n                            other={other}\n                        />\n                        <SelectContact\n                            userId={props.userId}\n                            saveContact={setSelectedContact}\n                            contacts={contacts}\n                            setContacts={setContacts}\n                        />\n                        <Button\n                            variant='contained'\n                            color='primary'\n                            className={classes.button}\n                            onClick={saveDetailsClick}\n                        >\n                            Save Details\n                        </Button>\n                    </div>\n                ))}\n\n            {hasError && <p>{contactErrorMessage}</p>}\n\n            <Button\n                variant='contained'\n                color='primary'\n                className={classes.button}\n                onClick={startJourneyClick}\n            >\n                {!startedJourney ? 'Start Journey' : 'End Journey'}\n            </Button>\n        </div>\n    )\n}\n\nexport default Main\n","/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/GoogleLogin.js",[],"/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/backendApi.js",[],"/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/UserContacts.js",["156","157"],"import { React, useState, useEffect, useContext } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport {\n    postNewContact,\n    getContactsByUid,\n    deleteContactByContactId,\n    sendEditContact,\n} from './backendApi'\nimport Loading from './Loading'\n\nconst UserContacts = () => {\n    // material UI stuff\n    const useStyles = makeStyles((theme) => ({\n        root: {\n            '& > *': {\n                margin: theme.spacing(1),\n                width: '25ch',\n            },\n        },\n        button: {\n            margin: theme.spacing(1),\n            background: '#00A99D',\n        },\n    }))\n    const classes = useStyles()\n\n    // state stuff\n    const [showContactsForm, setShowContactsForm] = useState(false)\n    const [firstName, setFirstName] = useState('')\n    const [lastName, setLastName] = useState('')\n    const [email, setEmail] = useState('')\n    const [relationship, setRelationship] = useState('')\n    const [houseNumber, setHouseNumber] = useState('')\n    const [streetName, setStreetName] = useState('')\n    const [postcode, setPostcode] = useState('')\n    const [city, setCity] = useState('')\n    const [userContacts, setUserContacts] = useState({})\n    const [isLoading, setIsLoading] = useState(true)\n    const [contactAdded, setContactAdded] = useState(true)\n    const [contactDeleted, setContactDeleted] = useState(true)\n    const [contactToBeEdited, setContactToBeEdited] = useState(0)\n\n    const uid = JSON.parse(localStorage.getItem('userId'))\n\n    useEffect(() => {\n        getContactsByUid(uid).then((contacts) => {\n            setUserContacts(contacts)\n            setIsLoading(false)\n        })\n    }, [contactAdded, contactDeleted])\n\n    const handleShowContactsForm = () => {\n        if (showContactsForm) {\n            setShowContactsForm(false)\n        } else {\n            setShowContactsForm(true)\n        }\n    }\n\n    const handleNewContactSubmit = (event) => {\n        event.preventDefault()\n        const newContact = {\n            first_name: firstName,\n            last_name: lastName,\n            email: email,\n            relationship_user: relationship,\n            house_number: houseNumber,\n            street_name: streetName,\n            postcode: postcode,\n            city: city,\n        }\n        postNewContact(newContact, uid).then((contact) => {\n            if (contact) {\n                setFirstName('')\n                setLastName('')\n                setEmail('')\n                setHouseNumber('')\n                setPostcode('')\n                setRelationship('')\n                setStreetName('')\n                setCity('')\n                setShowContactsForm(false)\n                if (contactAdded === true) {\n                    setContactAdded(false)\n                } else {\n                    setContactAdded(true)\n                }\n            }\n        })\n    }\n    const handleShowEdit = (id, contact) => {\n        console.log(id, 'ID')\n        setFirstName(contact.first_name)\n        setLastName(contact.last_name)\n        setEmail(contact.email)\n        setHouseNumber(contact.house_number)\n        setPostcode(contact.postcode)\n        setRelationship(contact.relationship_user)\n        setStreetName(contact.street_name)\n        setCity(contact.city)\n        setContactToBeEdited(id)\n    }\n    const handleCancelEdit = () => {\n        setFirstName('')\n        setLastName('')\n        setEmail('')\n        setHouseNumber('')\n        setPostcode('')\n        setRelationship('')\n        setStreetName('')\n        setCity('')\n        setContactToBeEdited(0)\n    }\n\n    const handleEditContactSubmit = (event) => {\n        event.preventDefault()\n        const editContact = {\n            first_name: firstName,\n            last_name: lastName,\n            email: email,\n            relationship_user: relationship,\n            house_number: houseNumber,\n            street_name: streetName,\n            postcode: postcode,\n            city: city,\n        }\n        sendEditContact(editContact, uid, contactToBeEdited).then((contact) => {\n            if (contact) {\n                setFirstName('')\n                setLastName('')\n                setEmail('')\n                setHouseNumber('')\n                setPostcode('')\n                setRelationship('')\n                setStreetName('')\n                setCity('')\n                setContactToBeEdited(0)\n                setShowContactsForm(false)\n                if (contactAdded === true) {\n                    setContactAdded(false)\n                } else {\n                    setContactAdded(true)\n                }\n            }\n        })\n    }\n\n    const handleDeleteContact = (contact_id) => {\n        deleteContactByContactId(uid, contact_id).then((response) => {\n            if (contactDeleted === true) {\n                setContactDeleted(false)\n            } else {\n                setContactDeleted(true)\n            }\n        })\n    }\n\n    return (\n        <div className='userContactsContainer'>\n            <h2>CONTACTS</h2>\n\n            {isLoading ? (\n                <Loading />\n            ) : (\n                <>\n                    {' '}\n                    {userContacts.contacts.length === 0 ? (\n                        <div className='userContacts'>Please add a contact</div>\n                    ) : (\n                        <>\n                            {userContacts.contacts.map((contact) => {\n                                if (contactToBeEdited === contact.contact_id) {\n                                    return (\n                                        <div\n                                            className='userContacts'\n                                            key={contact.contact_id}\n                                        >\n                                            <form\n                                                className={classes.root}\n                                                noValidate\n                                                autoComplete='off'\n                                            >\n                                                <TextField\n                                                    className='form-control'\n                                                    id='filled-basic'\n                                                    label='First Name'\n                                                    name='firstName'\n                                                    type='text'\n                                                    value={firstName}\n                                                    onChange={(event) =>\n                                                        setFirstName(\n                                                            event.target.value\n                                                        )\n                                                    }\n                                                    variant='filled'\n                                                />\n                                                <TextField\n                                                    className='form-control'\n                                                    id='filled-basic'\n                                                    label='Last Name'\n                                                    name='lastName'\n                                                    type='text'\n                                                    value={lastName}\n                                                    onChange={(event) =>\n                                                        setLastName(\n                                                            event.target.value\n                                                        )\n                                                    }\n                                                    variant='filled'\n                                                />\n                                                <TextField\n                                                    className='form-control'\n                                                    id='filled-basic'\n                                                    label='Email'\n                                                    name='email'\n                                                    type='text'\n                                                    value={email}\n                                                    onChange={(event) =>\n                                                        setEmail(\n                                                            event.target.value\n                                                        )\n                                                    }\n                                                    variant='filled'\n                                                />\n                                                <TextField\n                                                    className='form-control'\n                                                    id='filled-basic'\n                                                    label='Relationship'\n                                                    name='relationship'\n                                                    type='text'\n                                                    value={relationship}\n                                                    onChange={(event) =>\n                                                        setRelationship(\n                                                            event.target.value\n                                                        )\n                                                    }\n                                                    variant='filled'\n                                                />\n                                                <TextField\n                                                    className='form-control'\n                                                    id='filled-basic'\n                                                    label='House Number'\n                                                    name='houseNumber'\n                                                    type='text'\n                                                    value={houseNumber}\n                                                    onChange={(event) =>\n                                                        setHouseNumber(\n                                                            event.target.value\n                                                        )\n                                                    }\n                                                    variant='filled'\n                                                />\n                                                <TextField\n                                                    className='form-control'\n                                                    id='filled-basic'\n                                                    label='Street Name'\n                                                    name='streetName'\n                                                    type='text'\n                                                    value={streetName}\n                                                    onChange={(event) =>\n                                                        setStreetName(\n                                                            event.target.value\n                                                        )\n                                                    }\n                                                    variant='filled'\n                                                />\n                                                <TextField\n                                                    className='form-control'\n                                                    id='filled-basic'\n                                                    label='Postcode'\n                                                    name='postcode'\n                                                    type='text'\n                                                    value={postcode}\n                                                    onChange={(event) =>\n                                                        setPostcode(\n                                                            event.target.value\n                                                        )\n                                                    }\n                                                    variant='filled'\n                                                />\n                                                <TextField\n                                                    className='form-control'\n                                                    id='filled-basic'\n                                                    label='city'\n                                                    name='city'\n                                                    type='text'\n                                                    value={city}\n                                                    onChange={(event) =>\n                                                        setCity(\n                                                            event.target.value\n                                                        )\n                                                    }\n                                                    variant='filled'\n                                                />\n                                            </form>\n                                            <div className='contactButtonsContainer'>\n                                                <Button\n                                                    variant='contained'\n                                                    color='primary'\n                                                    className={classes.button}\n                                                    onClick={handleCancelEdit}\n                                                >\n                                                    Cancel\n                                                </Button>\n                                                <Button\n                                                    variant='contained'\n                                                    color='primary'\n                                                    className={classes.button}\n                                                    onClick={\n                                                        handleEditContactSubmit\n                                                    }\n                                                >\n                                                    Save Contact\n                                                </Button>\n                                            </div>\n                                        </div>\n                                    )\n                                } else {\n                                    return (\n                                        <div\n                                            className='userContacts'\n                                            key={contact.contact_id}\n                                        >\n                                            {' '}\n                                            <p>\n                                                First Name: {contact.first_name}\n                                            </p>\n                                            <p>\n                                                Last Name: {contact.last_name}\n                                            </p>\n                                            <p>Email: {contact.email}</p>\n                                            <p>\n                                                Relatonship:{' '}\n                                                {contact.relationship_user}\n                                            </p>\n                                            <p>\n                                                House Number:{' '}\n                                                {contact.house_number}\n                                            </p>\n                                            <p>\n                                                Street Name:{' '}\n                                                {contact.street_name}\n                                            </p>\n                                            <p>Post Code: {contact.postcode}</p>\n                                            <p>City: {contact.city}</p>\n                                            <div className='contactButtonsContainer'>\n                                                <Button\n                                                    variant='contained'\n                                                    color='primary'\n                                                    className={classes.button}\n                                                    onClick={() => {\n                                                        handleShowEdit(\n                                                            contact.contact_id,\n                                                            contact\n                                                        )\n                                                    }}\n                                                >\n                                                    Edit Contact\n                                                </Button>{' '}\n                                                <Button\n                                                    variant='contained'\n                                                    color='primary'\n                                                    className={classes.button}\n                                                    onClick={() => {\n                                                        handleDeleteContact(\n                                                            contact.contact_id\n                                                        )\n                                                    }}\n                                                >\n                                                    Delete Contact\n                                                </Button>{' '}\n                                            </div>\n                                        </div>\n                                    )\n                                }\n                            })}\n                        </>\n                    )}{' '}\n                </>\n            )}\n\n            <Button\n                variant='contained'\n                color='primary'\n                className={classes.button}\n                onClick={handleShowContactsForm}\n            >\n                {showContactsForm ? 'Hide Contacts Form' : 'Add Contacts'}\n            </Button>\n            {showContactsForm && (\n                <div className='userContactsForm'>\n                    {'Please complete all fields'}\n                    <form\n                        className={classes.root}\n                        noValidate\n                        autoComplete='off'\n                    >\n                        <TextField\n                            className='form-control'\n                            id='filled-basic'\n                            label='First Name'\n                            name='firstName'\n                            type='text'\n                            value={firstName}\n                            onChange={(event) =>\n                                setFirstName(event.target.value)\n                            }\n                            variant='filled'\n                        />\n                        <TextField\n                            className='form-control'\n                            id='filled-basic'\n                            label='Last Name'\n                            name='lastName'\n                            type='text'\n                            value={lastName}\n                            onChange={(event) =>\n                                setLastName(event.target.value)\n                            }\n                            variant='filled'\n                        />\n                        <TextField\n                            className='form-control'\n                            id='filled-basic'\n                            label='Email'\n                            name='email'\n                            type='text'\n                            value={email}\n                            onChange={(event) => setEmail(event.target.value)}\n                            variant='filled'\n                        />\n                        <TextField\n                            className='form-control'\n                            id='filled-basic'\n                            label='Relationship'\n                            name='relationship'\n                            type='text'\n                            value={relationship}\n                            onChange={(event) =>\n                                setRelationship(event.target.value)\n                            }\n                            variant='filled'\n                        />\n                        <TextField\n                            className='form-control'\n                            id='filled-basic'\n                            label='House Number'\n                            name='houseNumber'\n                            type='text'\n                            value={houseNumber}\n                            onChange={(event) =>\n                                setHouseNumber(event.target.value)\n                            }\n                            variant='filled'\n                        />\n                        <TextField\n                            className='form-control'\n                            id='filled-basic'\n                            label='Street Name'\n                            name='streetName'\n                            type='text'\n                            value={streetName}\n                            onChange={(event) =>\n                                setStreetName(event.target.value)\n                            }\n                            variant='filled'\n                        />\n                        <TextField\n                            className='form-control'\n                            id='filled-basic'\n                            label='Postcode'\n                            name='postcode'\n                            type='text'\n                            value={postcode}\n                            onChange={(event) =>\n                                setPostcode(event.target.value)\n                            }\n                            variant='filled'\n                        />\n                        <TextField\n                            className='form-control'\n                            id='filled-basic'\n                            label='city'\n                            name='city'\n                            type='text'\n                            value={city}\n                            onChange={(event) => setCity(event.target.value)}\n                            variant='filled'\n                        />\n                    </form>\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        className={classes.button}\n                        onClick={handleNewContactSubmit}\n                    >\n                        Save Contact\n                    </Button>\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport default UserContacts\n","/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/FacebookLogin.js",[],"/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/SignInEmail.js",[],"/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/SignupForm.js",[],"/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/WhoYouWith.js",["158"],"import { React, useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport TextField from '@material-ui/core/TextField'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n            width: '25ch',\n        },\n    },\n}))\n\nfunction WhoYouWith(props) {\n    const {\n        savePersonOne,\n        personOne,\n        savePersonTwo,\n        personTwo,\n        savePersonThree,\n        personThree,\n    } = props\n\n    const classes = useStyles()\n\n    return (\n        <div className='whoYouWithContent'>\n            <p className='whoYouWithTitle'>Who You With? </p>\n            <div className='whoYouWithForm'>\n                <form className={classes.root} noValidate autoComplete='off'>\n                    <TextField\n                        className='form-control'\n                        id='filled-basic'\n                        label='Person 1'\n                        name='personOne'\n                        type='text'\n                        value={personOne}\n                        onChange={(event) => savePersonOne(event.target.value)}\n                        variant='filled'\n                    />\n                    <TextField\n                        className='form-control'\n                        id='filled-basic'\n                        label='Person 2'\n                        name='personTwo'\n                        type='text'\n                        value={personTwo}\n                        onChange={(event) => savePersonTwo(event.target.value)}\n                        variant='filled'\n                    />\n                    <TextField\n                        className='form-control'\n                        id='filled-basic'\n                        label='Person 3'\n                        name='personThree'\n                        type='text'\n                        value={personThree}\n                        onChange={(event) =>\n                            savePersonThree(event.target.value)\n                        }\n                        variant='filled'\n                    />\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default WhoYouWith\n","/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/JourneyDetails.js",["159","160","161","162"],"import { React, useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport FormHelperText from '@material-ui/core/FormHelperText'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n            width: '25ch',\n        },\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n}))\n\nfunction JourneyDetails(props) {\n    const classes = useStyles()\n    const {\n        setTravelMode,\n        travelMode,\n        setTaxiReg,\n        taxiReg,\n        setBusService,\n        busService,\n        setTrainService,\n        trainService,\n        setTravelCompanion,\n        travelCompanion,\n        setOther,\n        other,\n    } = props\n\n    return (\n        <div className='journeyContent'>\n            <FormControl\n                variant='filled'\n                className='form-control'\n                style={{ minWidth: 224 }}\n            >\n                <InputLabel id='demo-simple-select-filled-label'>\n                    Select Travel Mode\n                </InputLabel>\n                <Select\n                    labelId='demo-simple-select-filled-label'\n                    id='demo-simple-select-filled'\n                    onChange={(event) => {\n                        setTravelMode(event.target.value)\n                    }}\n                    className='form-control'\n                >\n                    <MenuItem value='walking'>\n                        <em>Walking</em>\n                    </MenuItem>\n                    <MenuItem value='taxi'>Taxi</MenuItem>\n                    <MenuItem value='train'>Train</MenuItem>\n                    <MenuItem value='bus'>Bus</MenuItem>\n                    <MenuItem value='other'>Other</MenuItem>\n                </Select>\n            </FormControl>\n\n            <div className='newUserForm'>\n                {travelMode === 'taxi' && (\n                    <div className='form-group'>\n                        <form\n                            className={classes.root}\n                            noValidate\n                            autoComplete='off'\n                        >\n                            <TextField\n                                id='taxiReg'\n                                label='Taxi Reg'\n                                className='form-control'\n                                variant='outlined'\n                                name='taxiReg'\n                                type='text'\n                                placeholder='Taxi Reg'\n                                required\n                                value={taxiReg}\n                                onChange={(event) =>\n                                    setTaxiReg(event.target.value)\n                                }\n                            />\n                        </form>\n                    </div>\n                )}\n                {travelMode === 'bus' && (\n                    <div className='form-group'>\n                        <form\n                            className={classes.root}\n                            noValidate\n                            autoComplete='off'\n                        >\n                            <TextField\n                                id='busService'\n                                label='Bus service'\n                                className='form-control'\n                                variant='outlined'\n                                name='busService'\n                                type='text'\n                                placeholder='Bus Service'\n                                required\n                                value={busService}\n                                onChange={(event) =>\n                                    setBusService(event.target.value)\n                                }\n                            />\n                        </form>\n                    </div>\n                )}\n\n                {travelMode === 'train' && (\n                    <div className='form-group'>\n                        <form\n                            className={classes.root}\n                            noValidate\n                            autoComplete='off'\n                        >\n                            <TextField\n                                id='trainService'\n                                label='Train service'\n                                className='form-control'\n                                variant='outlined'\n                                name='trainService'\n                                type='text'\n                                placeholder='Train Service'\n                                required\n                                value={trainService}\n                                onChange={(event) =>\n                                    setTrainService(event.target.value)\n                                }\n                            />\n                        </form>\n                    </div>\n                )}\n                {travelMode === 'other' && (\n                    <div className='form-group'>\n                        <form\n                            className={classes.root}\n                            noValidate\n                            autoComplete='off'\n                        >\n                            <TextField\n                                id='other'\n                                label='Other'\n                                className='form-control'\n                                variant='outlined'\n                                name='other'\n                                type='text'\n                                placeholder='please give details'\n                                required\n                                value={other}\n                                onChange={(event) =>\n                                    setOther(event.target.value)\n                                }\n                            />\n                        </form>\n                    </div>\n                )}\n                <div className='form-group'>\n                    <form\n                        className={classes.root}\n                        noValidate\n                        autoComplete='off'\n                    >\n                        <TextField\n                            id='travelCompanion'\n                            label='Travel companion ?'\n                            className='form-control'\n                            variant='outlined'\n                            name='travelCompanion'\n                            type='text'\n                            placeholder='Travel Companion?'\n                            value={travelCompanion}\n                            onChange={(event) =>\n                                setTravelCompanion(event.target.value)\n                            }\n                        />\n                    </form>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default JourneyDetails\n","/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/Map.js",["163"],"import {\n    GoogleMap,\n    Marker,\n    DirectionsRenderer,\n    DirectionsService,\n    HeatmapLayer,\n    DistanceMatrixService,\n} from '@react-google-maps/api'\nimport { React, useRef, useEffect, useState } from 'react'\nimport { modeNightStyle, modeDayStyle } from './styles/MapNightMode'\nimport Loading from './Loading'\nimport { getCrimesByLocation } from '../CrimeApi'\nimport { getOriginCoord } from '../geocodeApi'\nimport { makeStyles } from '@material-ui/core/styles'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport Icon from '@material-ui/core/Icon'\nimport HeatSwitch from './Switch'\nimport FormGroup from '@material-ui/core/FormGroup'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n            width: '25ch',\n        },\n    },\n    button: {\n        margin: theme.spacing(1),\n        background: '#00A99D',\n    },\n}))\n\nconst Map = (props) => {\n    const classes = useStyles()\n    const [response, setResponse] = useState(null)\n    const [centre, setCentre] = useState({})\n    const [isLoading, setLoading] = useState(true)\n    const [hasError, setError] = useState(false)\n    const [messageError, setMessage] = useState('')\n    const [duration, setDuration] = useState('')\n    const [distance, setDistance] = useState('')\n    const [route, setRoute] = useState(false)\n    const [crimeData, setData] = useState([])\n    const [showHeatMap, setShow] = useState(false)\n    const {\n        theme,\n        saveDetails,\n        startedJourney,\n        setWatchId,\n        watchId,\n        setOrigin,\n        origin,\n        setDestination,\n        destination,\n        endRoute,\n    } = props\n    // in order to have control over the origin and destination of the inputs, it is necessary to use them as references\n    const getOrigin = useRef('')\n    const getDestination = useRef('')\n\n    const [switchState, setSwitchState] = useState({\n        checkedB: false,\n    })\n\n    const handleSwitchChange = (event) => {\n        setSwitchState({\n            ...switchState,\n            [event.target.name]: event.target.checked,\n        })\n        onClickHeatMap()\n    }\n\n    // asking permission to navigator to set location\n    useEffect(() => {\n        navigator.permissions.query({ name: 'geolocation' }).then((result) => {\n            if (result.state === 'granted') {\n                if (startedJourney) {\n                    watchLocation()\n                } else {\n                    setLocation()\n                }\n            } else {\n                setError(true)\n                setMessage('Your browser needs access to your location')\n            }\n        })\n    }, [startedJourney])\n\n    // set centre and origin with current position\n    const setLocation = () => {\n        navigator.geolocation.getCurrentPosition((position) => {\n            setCentre({\n                lat: position.coords.latitude,\n                lng: position.coords.longitude,\n            })\n            setOrigin({\n                lat: position.coords.latitude,\n                lng: position.coords.longitude,\n            })\n            setLoading(false)\n        })\n    }\n\n    const watchLocation = () => {\n        const options = {\n            enableHighAccuracy: true,\n            timeout: 60000,\n            maximumAge: 0,\n        }\n        // let count = 0\n\n        if (navigator.geolocation) {\n            setWatchId(\n                navigator.geolocation.watchPosition(\n                    function (position) {\n                        // count++\n                        console.log(\n                            'Latitude is :',\n                            position.coords.latitude\n                            // count\n                        )\n                        console.log(\n                            'Longitude is :',\n                            position.coords.longitude\n                            // count\n                        )\n                        setCentre({\n                            lat: position.coords.latitude,\n                            lng: position.coords.longitude,\n                        })\n                    },\n                    function (error) {\n                        console.log(error)\n                    },\n                    options\n                )\n            )\n            console.log(watchId, 'watchId')\n        }\n    }\n\n    // when click the button to create the route, set the origin as the current position if there is nothing in the input, set the destination with the input value\n    const onClick = () => {\n        if (getOrigin.current.value === '') {\n            setOrigin(centre)\n            setRoute(false)\n        } else {\n            setOrigin(getOrigin.current.value)\n            setRoute(false)\n        }\n        setDestination(getDestination.current.value)\n    }\n\n    // callback function to send a request to the api of google to get the response to render the route\n    const directionsCallback = (response) => {\n        if (response !== null) {\n            if (response.status === 'OK') {\n                console.log(response, 'response directions')\n                setResponse(response)\n            } else {\n                console.log(response, 'response directions')\n            }\n        }\n    }\n\n    // callback function to send a request to the api of google to get the duration and the distance of route\n    const callbackDistanceService = (response, status) => {\n        if (status === 'OK' && response) {\n            setDuration(response.rows[0].elements[0].duration.text)\n            setDistance(response.rows[0].elements[0].distance.text)\n            setRoute(true)\n            saveDetails(origin, destination, duration, distance, centre)\n        }\n    }\n\n    const onClickHeatMap = () => {\n        if (typeof origin === 'string') {\n            getOriginCoord(origin).then((response) => {\n                getCrimesByLocation(response.lat, response.lng).then(\n                    (response) => {\n                        const dataCrime = []\n                        if (response) {\n                            response.forEach((crimeArray) => {\n                                let max = 40\n                                if (crimeArray.length !== 0) {\n                                    if (crimeArray.length < max) {\n                                        crimeArray.forEach((element) => {\n                                            dataCrime.push(element)\n                                        })\n                                    } else {\n                                        for (let i = 0; i <= max; i++) {\n                                            dataCrime.push(crimeArray[i])\n                                        }\n                                    }\n                                }\n                            })\n                        }\n                        setData(dataCrime)\n                    }\n                )\n            })\n        } else {\n            getCrimesByLocation(origin.lat, origin.lng).then((response) => {\n                const dataCrime = []\n                if (response) {\n                    response.forEach((crimeArray) => {\n                        let max = 40\n                        if (crimeArray.length !== 0) {\n                            if (crimeArray.length < max) {\n                                crimeArray.forEach((element) => {\n                                    dataCrime.push(element)\n                                })\n                            } else {\n                                for (let i = 0; i <= max; i++) {\n                                    dataCrime.push(crimeArray[i])\n                                }\n                            }\n                        }\n                    })\n                }\n                setData(dataCrime)\n            })\n        }\n        if (showHeatMap === true) {\n            setShow(false)\n        } else {\n            setShow(true)\n        }\n    }\n\n    return (\n        // the names of these classes are predetermined by the google api, they do not appear in any css file created by us\n        <div className='map'>\n            {/* display the message */}\n            {hasError && (\n                <div>\n                    <p>{messageError}</p>\n                    {/* <button onClick={showMap}>show map</button> */}\n                </div>\n            )}\n            {isLoading ? (\n                <Loading />\n            ) : (\n                <div className='map-container'>\n                    {/* component */}\n                    <GoogleMap\n                        id='direction-example'\n                        mapContainerStyle={\n                            !startedJourney\n                                ? {\n                                      height: '200px',\n                                      width: '100%',\n                                  }\n                                : {\n                                      height: '100vh',\n                                      width: '100%',\n                                  }\n                        }\n                        zoom={startedJourney ? 20 : 15}\n                        center={centre}\n                        options={\n                            theme === 'light'\n                                ? { styles: modeDayStyle }\n                                : { styles: modeNightStyle }\n                        }\n                    >\n                        {/* the original marker with the centre in the current position*/}\n                        <Marker position={centre} />\n\n                        {/* if origin and destination are added, send the request to get the route */}\n                        {destination !== '' && origin !== '' && (\n                            <DirectionsService\n                                options={{\n                                    destination,\n                                    origin,\n                                    travelMode: 'WALKING',\n                                }}\n                                callback={directionsCallback}\n                            />\n                        )}\n                        {/* once get the response to the request, render the route in the map*/}\n                        {response !== null && !endRoute && (\n                            <DirectionsRenderer\n                                options={{ directions: response }}\n                            />\n                        )}\n\n                        {/* render de heatmapping in the map, the coordinates have to be changed with the coordinates from the police api */}\n                        {showHeatMap && (\n                            <HeatmapLayer\n                                data={crimeData.map((location) => {\n                                    return new window.google.maps.LatLng(\n                                        location.lat,\n                                        location.lng\n                                    )\n                                })}\n                            />\n                        )}\n\n                        {/* once the destination is defined and the request is not sended yet to the api, send the request */}\n                        {destination !== '' && !route && (\n                            <DistanceMatrixService\n                                options={{\n                                    destinations: [destination],\n                                    origins: [origin],\n                                    travelMode: 'WALKING',\n                                }}\n                                callback={callbackDistanceService}\n                            />\n                        )}\n                    </GoogleMap>\n                </div>\n            )}\n            {/* form to add the origin and the destination and the button to render the route */}\n            {!startedJourney && (\n                <div className='map-settings'>\n                    {/* <hr className='mt-0 mb-3' /> */}\n                    <div className='row'>\n                        <div className='col-md-6 col-lg-4'>\n                            <div className='form-group'>\n                                <form\n                                    className={classes.root}\n                                    noValidate\n                                    autoComplete='off'\n                                >\n                                    <TextField\n                                        id='ORIGIN'\n                                        label='Origin'\n                                        className='form-control'\n                                        variant='outlined'\n                                        placeholder='current location'\n                                        inputRef={getOrigin}\n                                    />\n                                </form>\n                            </div>\n                        </div>\n                        <div className='col-md-6 col-lg-4'>\n                            <div className='form-group'>\n                                <form\n                                    className={classes.root}\n                                    noValidate\n                                    autoComplete='off'\n                                >\n                                    <TextField\n                                        id='DESTINATION'\n                                        label='Destination'\n                                        className='form-control'\n                                        variant='outlined'\n                                        inputRef={getDestination}\n                                    />\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                    {/* button to create the route */}\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        className={classes.button}\n                        endIcon={<Icon>send</Icon>}\n                        onClick={onClick}\n                    >\n                        Build Route\n                    </Button>\n\n                    {/* when we have the response from the request to the api and we get the duration and the distance, display in a paragraph */}\n                    {route && (\n                        <p>\n                            Duration: {duration}, Distance: {distance}\n                        </p>\n                    )}\n                    {/* button to display crime markers */}\n                    <FormGroup className='switchContainer'>\n                        <FormControlLabel\n                            control={\n                                <HeatSwitch\n                                    checked={switchState.checkedB}\n                                    onChange={handleSwitchChange}\n                                    name='checkedB'\n                                />\n                            }\n                            label={\n                                showHeatMap\n                                    ? 'Hide Hot Spots'\n                                    : 'Show Hot Spots'\n                            }\n                        />\n                    </FormGroup>\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport default Map\n","/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/geocodeApi.js",[],"/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/SelectContact.js",["164","165","166"],"import { React, useState, useEffect } from 'react'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport { makeStyles } from '@material-ui/core/styles'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport MenuItem from '@material-ui/core/MenuItem'\n\nfunction SelectContact(props) {\n    const { saveContact, contacts } = props\n\n    const useStyles = makeStyles((theme) => ({\n        root: {\n            '& > *': {\n                margin: theme.spacing(1),\n                width: '25ch',\n            },\n        },\n        formControl: {\n            margin: theme.spacing(1),\n            minWidth: 120,\n        },\n        selectEmpty: {\n            marginTop: theme.spacing(2),\n        },\n    }))\n\n    return (\n        <div>\n            <FormControl\n                variant='filled'\n                className='form-control'\n                style={{ minWidth: 224 }}\n            >\n                <InputLabel id='demo-simple-select-filled-label'>\n                    Select Emergency Contact\n                </InputLabel>\n                <Select\n                    labelId='demo-simple-select-filled-label'\n                    id='demo-simple-select-filled'\n                    onChange={(event) => {\n                        saveContact(event.target.value)\n                    }}\n                    className='form-control'\n                    required\n                >\n                    {contacts.map((contact) => {\n                        return (\n                            <MenuItem\n                                value={contact.first_name}\n                                key={contact.first_name}\n                            >\n                                {contact.first_name}\n                            </MenuItem>\n                        )\n                    })}\n                </Select>\n            </FormControl>\n        </div>\n    )\n}\n\nexport default SelectContact\n","/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/Switch.js",[],"/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/CrimeApi.js",[],"/Users/alanharrison/Desktop/Northcoders/Project/nc-final-project-fe/src/components/styles/MapNightMode.js",[],{"ruleId":"167","replacedBy":"168"},{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","severity":1,"message":"172","line":1,"column":27,"nodeType":"173","messageId":"174","endLine":1,"endColumn":37},{"ruleId":"171","severity":1,"message":"175","line":1,"column":39,"nodeType":"173","messageId":"174","endLine":1,"endColumn":52},{"ruleId":"171","severity":1,"message":"176","line":28,"column":16,"nodeType":"173","messageId":"174","endLine":28,"endColumn":24},{"ruleId":"171","severity":1,"message":"177","line":2,"column":8,"nodeType":"173","messageId":"174","endLine":2,"endColumn":14},{"ruleId":"171","severity":1,"message":"178","line":2,"column":10,"nodeType":"173","messageId":"174","endLine":2,"endColumn":14},{"ruleId":"171","severity":1,"message":"176","line":2,"column":16,"nodeType":"173","messageId":"174","endLine":2,"endColumn":24},{"ruleId":"171","severity":1,"message":"179","line":2,"column":26,"nodeType":"173","messageId":"174","endLine":2,"endColumn":34},{"ruleId":"171","severity":1,"message":"172","line":1,"column":38,"nodeType":"173","messageId":"174","endLine":1,"endColumn":48},{"ruleId":"171","severity":1,"message":"180","line":4,"column":8,"nodeType":"173","messageId":"174","endLine":4,"endColumn":19},{"ruleId":"171","severity":1,"message":"181","line":31,"column":22,"nodeType":"173","messageId":"174","endLine":31,"endColumn":33},{"ruleId":"171","severity":1,"message":"182","line":39,"column":12,"nodeType":"173","messageId":"174","endLine":39,"endColumn":18},{"ruleId":"171","severity":1,"message":"183","line":39,"column":20,"nodeType":"173","messageId":"174","endLine":39,"endColumn":29},{"ruleId":"184","severity":1,"message":"185","line":84,"column":8,"nodeType":"186","endLine":84,"endColumn":34,"suggestions":"187"},{"ruleId":"171","severity":1,"message":"188","line":10,"column":8,"nodeType":"173","messageId":"174","endLine":10,"endColumn":17},{"ruleId":"171","severity":1,"message":"189","line":55,"column":23,"nodeType":"173","messageId":"174","endLine":55,"endColumn":32},{"ruleId":"171","severity":1,"message":"189","line":80,"column":23,"nodeType":"173","messageId":"174","endLine":80,"endColumn":32},{"ruleId":"171","severity":1,"message":"189","line":106,"column":23,"nodeType":"173","messageId":"174","endLine":106,"endColumn":32},{"ruleId":"171","severity":1,"message":"189","line":143,"column":23,"nodeType":"173","messageId":"174","endLine":143,"endColumn":32},{"ruleId":"171","severity":1,"message":"182","line":31,"column":12,"nodeType":"173","messageId":"174","endLine":31,"endColumn":18},{"ruleId":"184","severity":1,"message":"190","line":67,"column":8,"nodeType":"186","endLine":67,"endColumn":10,"suggestions":"191"},{"ruleId":"192","severity":1,"message":"193","line":241,"column":50,"nodeType":"194","messageId":"195","endLine":241,"endColumn":52},{"ruleId":"171","severity":1,"message":"172","line":1,"column":38,"nodeType":"173","messageId":"174","endLine":1,"endColumn":48},{"ruleId":"184","severity":1,"message":"196","line":52,"column":8,"nodeType":"186","endLine":52,"endColumn":38,"suggestions":"197"},{"ruleId":"171","severity":1,"message":"198","line":1,"column":17,"nodeType":"173","messageId":"174","endLine":1,"endColumn":25},{"ruleId":"171","severity":1,"message":"198","line":1,"column":17,"nodeType":"173","messageId":"174","endLine":1,"endColumn":25},{"ruleId":"171","severity":1,"message":"199","line":1,"column":27,"nodeType":"173","messageId":"174","endLine":1,"endColumn":36},{"ruleId":"171","severity":1,"message":"200","line":5,"column":8,"nodeType":"173","messageId":"174","endLine":5,"endColumn":22},{"ruleId":"171","severity":1,"message":"201","line":9,"column":8,"nodeType":"173","messageId":"174","endLine":9,"endColumn":14},{"ruleId":"184","severity":1,"message":"202","line":89,"column":8,"nodeType":"186","endLine":89,"endColumn":24,"suggestions":"203"},{"ruleId":"171","severity":1,"message":"198","line":1,"column":17,"nodeType":"173","messageId":"174","endLine":1,"endColumn":25},{"ruleId":"171","severity":1,"message":"199","line":1,"column":27,"nodeType":"173","messageId":"174","endLine":1,"endColumn":36},{"ruleId":"171","severity":1,"message":"204","line":11,"column":11,"nodeType":"173","messageId":"174","endLine":11,"endColumn":20},"no-native-reassign",["205"],"no-negated-in-lhs",["206"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'createContext' is defined but never used.","'provider' is defined but never used.","'Toggle' is defined but never used.","'auth' is defined but never used.","'firebase' is defined but never used.","'SetContacts' is defined but never used.","'setUserName' is assigned a value but never used.","'userId' is assigned a value but never used.","'setUserId' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'firstName' and 'userData'. Either include them or remove the dependency array.","ArrayExpression",["207"],"'TextField' is defined but never used.","'errorCode' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'apiCalled' and 'props.userId'. Either include them or remove the dependency array. If 'setUserId' needs the current value of 'props.userId', you can also switch to useReducer instead of useState and read 'props.userId' in the reducer.",["208"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has a missing dependency: 'uid'. Either include it or remove the dependency array.",["209"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'FormHelperText' is defined but never used.","'Button' is defined but never used.","React Hook useEffect has missing dependencies: 'setLocation' and 'watchLocation'. Either include them or remove the dependency array.",["210"],"'useStyles' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"211","fix":"212"},{"desc":"213","fix":"214"},{"desc":"215","fix":"216"},{"desc":"217","fix":"218"},"Update the dependencies array to be: [userEdited, showUserEdit, userData, firstName]",{"range":"219","text":"220"},"Update the dependencies array to be: [apiCalled, props.userId]",{"range":"221","text":"222"},"Update the dependencies array to be: [contactAdded, contactDeleted, uid]",{"range":"223","text":"224"},"Update the dependencies array to be: [setLocation, startedJourney, watchLocation]",{"range":"225","text":"226"},[3178,3204],"[userEdited, showUserEdit, userData, firstName]",[2495,2497],"[apiCalled, props.userId]",[1759,1789],"[contactAdded, contactDeleted, uid]",[2763,2779],"[setLocation, startedJourney, watchLocation]"]